[{"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\AnalysesManager.ts":"1","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\Analysis.ts":"2","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\from\\fromJcamp.ts":"3","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\from\\__tests__\\fromJcamp.test.ts":"4","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\global.d.ts":"5","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\index.ts":"6","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\addStyle.ts":"7","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\colors.ts":"8","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\getJSGraph.ts":"9","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\getNormalizationAnnotations.ts":"10","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\__tests__\\getJSGraph.test.ts":"11","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\reactPlot\\getReactPlotJSON.ts":"12","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\reactPlot\\__tests__\\getReactPlotJSON.test.ts":"13","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\to\\toJcamp.ts":"14","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\to\\toJcamps.ts":"15","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\types.ts":"16","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\typings\\index.d.ts":"17","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\appendDistinctParameter.ts":"18","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\appendDistinctValue.ts":"19","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\convertUnit.ts":"20","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\ensureRegexp.ts":"21","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\getConvertedVariable.ts":"22","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\getNormalizedSpectrum.ts":"23","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\getXYSpectrum.ts":"24","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\__tests__\\convertUnit.test.ts":"25","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\__tests__\\getNormalizedSpectrum.baseline.test.ts":"26","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\__tests__\\getNormalizedSpectrum.test.ts":"27","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\__tests__\\getXYSpectrum.test.ts":"28","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\AnalysesManager.test.ts":"29","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\Analysis.test.ts":"30","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\AnalysisManager.distinct.test.ts":"31","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\index.ntuples.test.ts":"32","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\index.test.ts":"33"},{"size":4251,"mtime":1613989450778,"results":"34","hashOfConfig":"35"},{"size":5213,"mtime":1614075734917,"results":"36","hashOfConfig":"35"},{"size":1880,"mtime":1613988882604,"results":"37","hashOfConfig":"35"},{"size":1477,"mtime":1613743235052,"results":"38","hashOfConfig":"35"},{"size":511,"mtime":1614091238892,"results":"39","hashOfConfig":"35"},{"size":917,"mtime":1613743524482,"results":"40","hashOfConfig":"35"},{"size":997,"mtime":1614075388199,"results":"41","hashOfConfig":"35"},{"size":309,"mtime":1613743332072,"results":"42","hashOfConfig":"35"},{"size":1709,"mtime":1614075657019,"results":"43","hashOfConfig":"35"},{"size":1610,"mtime":1614075078464,"results":"44","hashOfConfig":"35"},{"size":778,"mtime":1613743311270,"results":"45","hashOfConfig":"35"},{"size":2251,"mtime":1614076492739,"results":"46","hashOfConfig":"35"},{"size":1136,"mtime":1613743380321,"results":"47","hashOfConfig":"35"},{"size":316,"mtime":1614070471693,"results":"48","hashOfConfig":"35"},{"size":829,"mtime":1614070440035,"results":"49","hashOfConfig":"35"},{"size":1855,"mtime":1614075614038,"results":"50","hashOfConfig":"35"},{"size":355,"mtime":1614091432859,"results":"51","hashOfConfig":"35"},{"size":393,"mtime":1613989441698,"results":"52","hashOfConfig":"35"},{"size":260,"mtime":1613986681221,"results":"53","hashOfConfig":"35"},{"size":887,"mtime":1614070082524,"results":"54","hashOfConfig":"35"},{"size":550,"mtime":1614091669185,"results":"55","hashOfConfig":"35"},{"size":818,"mtime":1614074175233,"results":"56","hashOfConfig":"35"},{"size":6074,"mtime":1614075626151,"results":"57","hashOfConfig":"35"},{"size":3541,"mtime":1614093749398,"results":"58","hashOfConfig":"35"},{"size":1119,"mtime":1613743423014,"results":"59","hashOfConfig":"35"},{"size":2605,"mtime":1614076602843,"results":"60","hashOfConfig":"35"},{"size":2987,"mtime":1614074430984,"results":"61","hashOfConfig":"35"},{"size":6466,"mtime":1614093680839,"results":"62","hashOfConfig":"35"},{"size":1095,"mtime":1613743250571,"results":"63","hashOfConfig":"35"},{"size":440,"mtime":1614076947919,"results":"64","hashOfConfig":"35"},{"size":2777,"mtime":1613743265547,"results":"65","hashOfConfig":"35"},{"size":3216,"mtime":1614076914825,"results":"66","hashOfConfig":"35"},{"size":2330,"mtime":1614076820255,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11p7qus",{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\AnalysesManager.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\Analysis.ts",["136"],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\from\\fromJcamp.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\from\\__tests__\\fromJcamp.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\global.d.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\index.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\addStyle.ts",["137"],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\colors.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\getJSGraph.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\getNormalizationAnnotations.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\jsgraph\\__tests__\\getJSGraph.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\reactPlot\\getReactPlotJSON.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\reactPlot\\__tests__\\getReactPlotJSON.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\to\\toJcamp.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\to\\toJcamps.ts",["138"],"import { fromVariables } from 'convert-to-jcamp';\r\nimport { Analysis } from '../Analysis';\r\nimport { SpectrumType } from '../types';\r\n\r\ninterface GetJcampOptions {\r\n  info?: Record<string, string>;\r\n  meta?: Record<string, string>;\r\n}\r\nexport function toJcamps(analysis: Analysis, options: GetJcampOptions = {}) {\r\n  let jcamps = [];\r\n  for (let spectrum of analysis.spectra) {\r\n    jcamps.push(getJcamp(spectrum, options));\r\n  }\r\n  return jcamps;\r\n}\r\n\r\nfunction getJcamp(spectrum: SpectrumType, options: GetJcampOptions) {\r\n  const { info = {}, meta = {} } = options;\r\n\r\n  let jcampOptions = {\r\n    options: {},\r\n    info: {\r\n      title: spectrum.title,\r\n      dataType: spectrum.dataType,\r\n      ...info,\r\n    },\r\n    meta: { ...spectrum.meta, ...meta },\r\n  };\r\n\r\n  return fromVariables(spectrum.variables, jcampOptions);\r\n}\r\n","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\types.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\typings\\index.d.ts",["139"],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\appendDistinctParameter.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\appendDistinctValue.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\convertUnit.ts",["140","141","142","143"],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\ensureRegexp.ts",["144","145","146","147"],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\getConvertedVariable.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\getNormalizedSpectrum.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\getXYSpectrum.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\__tests__\\convertUnit.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\__tests__\\getNormalizedSpectrum.baseline.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\__tests__\\getNormalizedSpectrum.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\util\\__tests__\\getXYSpectrum.test.ts",["148","149"],"import { toBeDeepCloseTo, toMatchCloseTo } from 'jest-matcher-deep-close-to';\r\nimport { SpectrumType } from '../../types';\r\n\r\nimport { getXYSpectrum } from '../getXYSpectrum';\r\n\r\nexpect.extend({ toBeDeepCloseTo, toMatchCloseTo });\r\n\r\nconst spectra: SpectrumType[] = [\r\n  {\r\n    variables: {\r\n      x: {\r\n        data: Float64Array.from([1, 2]),\r\n        units: 'mg',\r\n        label: 'Weight [mg]',\r\n      },\r\n      y: {\r\n        data: [3, 4],\r\n        units: '°C',\r\n        label: 'Temperature [°C]',\r\n      },\r\n      z: {\r\n        data: [5, 6],\r\n        units: '°C',\r\n        label: 'Expected temperature [°C]',\r\n      },\r\n      t: {\r\n        data: Float64Array.from([7, 8]),\r\n        units: 's',\r\n        label: 'Time [s]',\r\n      },\r\n    },\r\n  },\r\n  {\r\n    variables: {\r\n      x: {\r\n        data: [1, 2],\r\n        units: 'mL',\r\n        label: 'Volume [mL]',\r\n      },\r\n      y: {\r\n        data: [3, 4],\r\n        units: '°C',\r\n        label: 'Temperature [°C]',\r\n      },\r\n    },\r\n    title: 'My spectrum',\r\n    dataType: 'TGA',\r\n    meta: {\r\n      meta1: 'Meta 1',\r\n      meta2: 'Meta 2',\r\n    },\r\n  },\r\n  {\r\n    variables: {\r\n      x: {\r\n        data: [10, 20],\r\n        units: '',\r\n        label: 'Weight',\r\n      },\r\n      y: {\r\n        data: [30, 40],\r\n        units: '°C',\r\n        label: 'Temperature',\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\ndescribe('getXYSpectrum', () => {\r\n  it('Spectrum by labels', () => {\r\n    let xy =\r\n      getXYSpectrum(spectra, {\r\n        xLabel: 'Weight [mg]',\r\n        yLabel: 'Temperature [°C]',\r\n      })?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        units: 'mg',\r\n        label: 'Weight [mg]',\r\n        data: [1, 2],\r\n      },\r\n      y: {\r\n        units: '°C',\r\n        label: 'Temperature [°C]',\r\n        data: [3, 4],\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by partial labels', () => {\r\n    let xy =\r\n      getXYSpectrum(spectra, {\r\n        xLabel: 'weight',\r\n        yLabel: 'temp',\r\n      })?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        units: 'mg',\r\n        label: 'Weight [mg]',\r\n        data: [1, 2],\r\n      },\r\n      y: {\r\n        units: '°C',\r\n        label: 'Temperature [°C]',\r\n        data: [3, 4],\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by units s vs g', () => {\r\n    const query = { xUnits: 's', yUnits: 'g' };\r\n    let xy = getXYSpectrum(spectra, query)?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        units: 's',\r\n        label: 'Time [s]',\r\n        data: [7, 8],\r\n        min: 7,\r\n        max: 8,\r\n        isMonotone: true,\r\n      },\r\n      y: {\r\n        units: 'g',\r\n        label: 'Weight [g]',\r\n        data: [0.001, 0.002],\r\n        min: 0.001,\r\n        max: 0.002,\r\n        isMonotone: true,\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by units \"\" vs °C', () => {\r\n    let xy = getXYSpectrum(spectra, { units: 'vs °C' })?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        units: '°C',\r\n        label: 'Temperature',\r\n        data: [30, 40],\r\n        min: 30,\r\n        max: 40,\r\n        isMonotone: true,\r\n      },\r\n      y: {\r\n        units: '',\r\n        label: 'Weight',\r\n        data: [10, 20],\r\n        min: 10,\r\n        max: 20,\r\n        isMonotone: true,\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by units °C vs g', () => {\r\n    let xy =\r\n      getXYSpectrum(spectra, { xUnits: '°C', yUnits: 'g' })?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        units: '°C',\r\n        label: 'Temperature [°C]',\r\n        data: [3, 4],\r\n        min: 3,\r\n        max: 4,\r\n        isMonotone: true,\r\n      },\r\n      y: {\r\n        units: 'g',\r\n        label: 'Weight [g]',\r\n        data: [0.001, 0.002],\r\n        min: 0.001,\r\n        max: 0.002,\r\n        isMonotone: true,\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by dataType TGA', () => {\r\n    let xy = getXYSpectrum(spectra, { dataType: 'TGA' })?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        data: [1, 2],\r\n        units: 'mL',\r\n        label: 'Volume [mL]',\r\n      },\r\n      y: {\r\n        data: [3, 4],\r\n        units: '°C',\r\n        label: 'Temperature [°C]',\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by title My', () => {\r\n    let xy = getXYSpectrum(spectra, { title: 'My' })?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        data: [1, 2],\r\n        units: 'mL',\r\n        label: 'Volume [mL]',\r\n      },\r\n      y: {\r\n        data: [3, 4],\r\n        units: '°C',\r\n        label: 'Temperature [°C]',\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by meta meta2=\"Meta\"', () => {\r\n    let xy =\r\n      getXYSpectrum(spectra, { meta: { meta2: 'meta' } })?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        data: [1, 2],\r\n        units: 'mL',\r\n        label: 'Volume [mL]',\r\n      },\r\n      y: {\r\n        data: [3, 4],\r\n        units: '°C',\r\n        label: 'Temperature [°C]',\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by units L vs °F', () => {\r\n    let xy = getXYSpectrum(spectra, { xUnits: 'L', yUnits: '°F' });\r\n    expect(xy).toBeDeepCloseTo({\r\n      title: 'My spectrum',\r\n      dataType: 'TGA',\r\n      meta: { meta1: 'Meta 1', meta2: 'Meta 2' },\r\n      variables: {\r\n        x: {\r\n          units: 'L',\r\n          label: 'Volume [L]',\r\n          data: [0.001, 0.002],\r\n          min: 0.001,\r\n          max: 0.002,\r\n          isMonotone: true,\r\n        },\r\n        y: {\r\n          units: '°F',\r\n          label: 'Temperature [°F]',\r\n          data: [37.4, 39.2],\r\n          min: 37.4,\r\n          max: 39.2,\r\n          isMonotone: true,\r\n        },\r\n      },\r\n    });\r\n  });\r\n\r\n  it('Spectrum by units s vs g as units', () => {\r\n    let xy = getXYSpectrum(spectra, { units: 'g vs s' })?.variables || {};\r\n    xy.x.data = Array.from(xy.x.data);\r\n    expect(xy).toStrictEqual({\r\n      x: {\r\n        units: 's',\r\n        label: 'Time [s]',\r\n        data: [7, 8],\r\n        min: 7,\r\n        max: 8,\r\n        isMonotone: true,\r\n      },\r\n      y: {\r\n        units: 'g',\r\n        label: 'Weight [g]',\r\n        data: [0.001, 0.002],\r\n        min: 0.001,\r\n        max: 0.002,\r\n        isMonotone: true,\r\n      },\r\n    });\r\n  });\r\n});\r\n","C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\AnalysesManager.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\Analysis.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\AnalysisManager.distinct.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\index.ntuples.test.ts",[],"C:\\Users\\maase\\Documents\\GitHub\\cheminfo\\common-spectrum\\src\\__tests__\\index.test.ts",[],{"ruleId":"150","severity":1,"message":"151","line":152,"column":48,"nodeType":"152","messageId":"153","endLine":152,"endColumn":69},{"ruleId":"150","severity":1,"message":"151","line":18,"column":27,"nodeType":"152","messageId":"153","endLine":18,"endColumn":42},{"ruleId":"154","severity":1,"message":"155","line":1,"column":1,"nodeType":"156","endLine":1,"endColumn":50,"fix":"157"},{"ruleId":"158","severity":1,"message":"159","line":2,"column":28,"nodeType":"160","messageId":"161","endLine":2,"endColumn":31,"suggestions":"162"},{"ruleId":"158","severity":1,"message":"159","line":16,"column":10,"nodeType":"160","messageId":"161","endLine":16,"endColumn":13,"suggestions":"163"},{"ruleId":"158","severity":1,"message":"159","line":19,"column":4,"nodeType":"160","messageId":"161","endLine":19,"endColumn":7,"suggestions":"164"},{"ruleId":"150","severity":1,"message":"165","line":36,"column":23,"nodeType":"152","messageId":"153","endLine":36,"endColumn":39},{"ruleId":"150","severity":1,"message":"166","line":36,"column":23,"nodeType":"152","messageId":"153","endLine":36,"endColumn":39},{"ruleId":"150","severity":1,"message":"167","line":1,"column":20,"nodeType":"152","messageId":"153","endLine":1,"endColumn":59},{"ruleId":"150","severity":1,"message":"168","line":1,"column":20,"nodeType":"152","messageId":"153","endLine":1,"endColumn":59},{"ruleId":"158","severity":1,"message":"159","line":3,"column":38,"nodeType":"160","messageId":"161","endLine":3,"endColumn":41,"suggestions":"169"},{"ruleId":"158","severity":1,"message":"159","line":16,"column":33,"nodeType":"160","messageId":"161","endLine":16,"endColumn":36,"suggestions":"170"},{"ruleId":"154","severity":1,"message":"155","line":1,"column":1,"nodeType":"156","endLine":1,"endColumn":78,"fix":"171"},{"ruleId":"154","severity":1,"message":"172","line":2,"column":1,"nodeType":"156","endLine":2,"endColumn":44,"fix":"173"},"prefer-named-capture-group","Capture group '(.*)' should be converted to a named or non-capturing group.","Literal","required","import/order","There should be at least one empty line between import groups","ImportDeclaration",{"range":"174","text":"175"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["176","177"],["178","179"],["180","181"],"Capture group '(^|\\W)' should be converted to a named or non-capturing group.","Capture group '(\\W|$)' should be converted to a named or non-capturing group.","Capture group '((?:\\\\\\/|[^/])+)' should be converted to a named or non-capturing group.","Capture group '([migyu]{0,5})' should be converted to a named or non-capturing group.",["182","183"],["184","185"],{"range":"186","text":"175"},"There should be no empty line within import group",{"range":"187","text":"188"},[49,49],"\n",{"messageId":"189","fix":"190","desc":"191"},{"messageId":"192","fix":"193","desc":"194"},{"messageId":"189","fix":"195","desc":"191"},{"messageId":"192","fix":"196","desc":"194"},{"messageId":"189","fix":"197","desc":"191"},{"messageId":"192","fix":"198","desc":"194"},{"messageId":"189","fix":"199","desc":"191"},{"messageId":"192","fix":"200","desc":"194"},{"messageId":"189","fix":"201","desc":"191"},{"messageId":"192","fix":"202","desc":"194"},[77,77],[124,126],"","suggestUnknown",{"range":"203","text":"204"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"203","text":"205"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"206","text":"204"},{"range":"206","text":"205"},{"range":"207","text":"204"},{"range":"207","text":"205"},{"range":"208","text":"204"},{"range":"208","text":"205"},{"range":"209","text":"204"},{"range":"209","text":"205"},[39,42],"unknown","never",[345,348],[394,397],[100,103],[379,382]]